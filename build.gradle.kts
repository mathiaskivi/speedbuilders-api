import org.jreleaser.model.Active
import org.jreleaser.model.Signing

description = "An API for the SpeedBuilders plugin that allows developers to extend gameplay by listening to events."
group = "ee.mathiaskivi"
version = "1.0.0"

plugins {
    id("java")
    id("maven-publish")
    id("org.jreleaser") version "1.13.1"
}

repositories {
    maven("https://repo.papermc.io/repository/maven-public/")
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT")
}

java {
    sourceCompatibility = JavaVersion.VERSION_21

    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["java"])

            pom {
                name = rootProject.name
                description = rootProject.description
                groupId = rootProject.group.toString()
                version = rootProject.version.toString()
                url = "https://github.com/mathiaskivi/speedbuilders-api"

                developers {
                    developer {
                        id = "mathiaskivi"
                        name = "Mathias Kivi"
                    }
                }
                licenses {
                    license {
                        name = "GPL-3.0-only"
                        url = "https://spdx.org/licenses/GPL-3.0-only.html"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/mathiaskivi/speedbuilders-api.git"
                    developerConnection = "scm:git:ssh://github.com/mathiaskivi/speedbuilders-api.git"
                    url = "https://github.com/mathiaskivi/speedbuilders-api"
                }
            }
        }
    }

    repositories {
        maven {
            url = rootProject.layout.buildDirectory.dir("staging-deploy").get().asFile.toURI()
        }
    }
}

jreleaser {
    deploy {
        maven {
            mavenCentral {
                create("sonatype") {
                    active = Active.ALWAYS
                    url = "https://central.sonatype.com/api/v1/publisher"
                    stagingRepository(rootProject.layout.buildDirectory.dir("staging-deploy").get().asFile.toString())

                    // Username part of the generated token (https://central.sonatype.org/publish/generate-portal-token).
                    username = rootProject.findProperty("jreleaser.deploy.maven.mavenCentral.sonatype.username")?.toString() ?: System.getenv("jreleaser.deploy.maven.mavenCentral.sonatype.username")

                    // Password part of the generated token (https://central.sonatype.org/publish/generate-portal-token).
                    password = rootProject.findProperty("jreleaser.deploy.maven.mavenCentral.sonatype.password")?.toString() ?: System.getenv("jreleaser.deploy.maven.mavenCentral.sonatype.password")
                }
            }
        }
    }
    release {
        github {
            // The generated fine-grained token with 'Contents: Read and write' permission in the specific repository (https://github.com/settings/tokens).
            token = rootProject.findProperty("jreleaser.release.github.token")?.toString() ?: System.getenv("jreleaser.release.github.token")
        }
    }
    signing {
        active = Active.ALWAYS
        armored = true
        mode = Signing.Mode.FILE

        // Passphrase used for generating key pair with GnuPG.
        passphrase = rootProject.findProperty("jreleaser.signing.passphrase")?.toString() ?: System.getenv("jreleaser.signing.passphrase")

        // Path to the secret key file generated by GnuPG (gpg --output public.pgp --armor --export <KEY_PAIR_ID>).
        secretKey = rootProject.findProperty("jreleaser.signing.secretKey")?.toString() ?: System.getenv("jreleaser.signing.secretKey")

        // Path to the public key file generated by GnuPG (gpg --output secret.pgp --armor --export-secret-key <KEY_PAIR_ID>).
        publicKey = rootProject.findProperty("jreleaser.signing.publicKey")?.toString() ?: System.getenv("jreleaser.signing.publicKey")
    }
}
